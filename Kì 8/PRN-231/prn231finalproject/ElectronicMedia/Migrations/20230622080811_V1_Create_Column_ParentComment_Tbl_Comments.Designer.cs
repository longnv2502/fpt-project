// <auto-generated />
using System;
using ElectronicMedia.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectronicMedia.Migrations
{
    [DbContext(typeof(ElectronicNewspaperPageContext))]
    [Migration("20230622080811_V1_Create_Column_ParentComment_Tbl_Comments")]
    partial class V1_Create_Column_ParentComment_Tbl_Comments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ElectronicMedia.Models.ActionType", b =>
                {
                    b.Property<long>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("action_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActionTypeId"), 1L, 1);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("action_name");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("ActionTypeId");

                    b.ToTable("Action_type", (string)null);
                });

            modelBuilder.Entity("ElectronicMedia.Models.Article", b =>
                {
                    b.Property<long>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("article_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ArticleId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<long>("FkCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_category_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("ArticleId");

                    b.HasIndex("FkCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ElectronicMedia.Models.ArticlesAdvertisement", b =>
                {
                    b.Property<long>("FkAdvertisementId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_advertisement_id");

                    b.Property<long>("FkArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_article_id");

                    b.HasIndex("FkAdvertisementId");

                    b.HasIndex("FkArticleId");

                    b.ToTable("Articles_Advertisement", (string)null);
                });

            modelBuilder.Entity("ElectronicMedia.Models.ArticlesTag", b =>
                {
                    b.Property<long>("FkArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_article_id");

                    b.Property<long>("FkTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_tag_id");

                    b.HasIndex("FkArticleId");

                    b.HasIndex("FkTagId");

                    b.ToTable("Articles_tags", (string)null);
                });

            modelBuilder.Entity("ElectronicMedia.Models.Avertisement", b =>
                {
                    b.Property<long>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("advertisement_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdvertisementId"), 1L, 1);

                    b.Property<string>("AdApi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ad_api");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("AdvertisementId")
                        .HasName("PK_Advertisement");

                    b.ToTable("Avertisement", (string)null);
                });

            modelBuilder.Entity("ElectronicMedia.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_category_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"), 1L, 1);

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comment_content");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<long>("FkArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_article_id");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_user_id");

                    b.Property<int?>("LikeNumber")
                        .HasColumnType("int")
                        .HasColumnName("like_number");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_comment_id");

                    b.Property<bool?>("Report")
                        .HasColumnType("bit")
                        .HasColumnName("report");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.HasKey("CommentId");

                    b.HasIndex("FkArticleId");

                    b.HasIndex("FkUserId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Config", b =>
                {
                    b.Property<long>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("config_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConfigId"), 1L, 1);

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("config_name");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("ConfigId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Interaction", b =>
                {
                    b.Property<long>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("interaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InteractionId"), 1L, 1);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<long>("FkActionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_action_type_id");

                    b.Property<long>("FkArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_article_id");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_user_id");

                    b.Property<int?>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.HasKey("InteractionId");

                    b.HasIndex("FkActionTypeId");

                    b.HasIndex("FkArticleId");

                    b.HasIndex("FkUserId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"), 1L, 1);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_user");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag_name");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("update_user");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ElectronicMedia.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullname");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password-hash")
                        .HasDefaultValueSql("(0x)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password-salt")
                        .HasDefaultValueSql("(0x)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh-token")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime>("TokenCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("token-created")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<DateTime>("TokenExpires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("token-expires")
                        .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ElectronicMedia.Models.View", b =>
                {
                    b.Property<long>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("view_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ViewId"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<long>("FkArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_article_id");

                    b.Property<long>("FkUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_user_id");

                    b.HasKey("ViewId");

                    b.HasIndex("FkArticleId");

                    b.HasIndex("FkUserId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Article", b =>
                {
                    b.HasOne("ElectronicMedia.Models.Category", "FkCategory")
                        .WithMany("Articles")
                        .HasForeignKey("FkCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Articles_Categories");

                    b.Navigation("FkCategory");
                });

            modelBuilder.Entity("ElectronicMedia.Models.ArticlesAdvertisement", b =>
                {
                    b.HasOne("ElectronicMedia.Models.Avertisement", "FkAdvertisement")
                        .WithMany()
                        .HasForeignKey("FkAdvertisementId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_articles_advertisement_tbl_advertisement");

                    b.HasOne("ElectronicMedia.Models.Article", "FkArticle")
                        .WithMany()
                        .HasForeignKey("FkArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_articles_advertisement_tbl_articles");

                    b.Navigation("FkAdvertisement");

                    b.Navigation("FkArticle");
                });

            modelBuilder.Entity("ElectronicMedia.Models.ArticlesTag", b =>
                {
                    b.HasOne("ElectronicMedia.Models.Article", "FkArticle")
                        .WithMany()
                        .HasForeignKey("FkArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_articles_tags_tbl_articles");

                    b.HasOne("ElectronicMedia.Models.Tag", "FkTag")
                        .WithMany()
                        .HasForeignKey("FkTagId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_articles_tags_tbl_tags");

                    b.Navigation("FkArticle");

                    b.Navigation("FkTag");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Comment", b =>
                {
                    b.HasOne("ElectronicMedia.Models.Article", "FkArticle")
                        .WithMany("Comments")
                        .HasForeignKey("FkArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Articles");

                    b.HasOne("ElectronicMedia.Models.User", "FkUser")
                        .WithMany("Comments")
                        .HasForeignKey("FkUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users");

                    b.HasOne("ElectronicMedia.Models.Comment", "ParentComment")
                        .WithMany("ChildrenComments")
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("FkArticle");

                    b.Navigation("FkUser");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Interaction", b =>
                {
                    b.HasOne("ElectronicMedia.Models.ActionType", "FkActionType")
                        .WithMany("Interactions")
                        .HasForeignKey("FkActionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_interactions_tbl_action_type");

                    b.HasOne("ElectronicMedia.Models.Article", "FkArticle")
                        .WithMany("Interactions")
                        .HasForeignKey("FkArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Interactions_Articles");

                    b.HasOne("ElectronicMedia.Models.User", "FkUser")
                        .WithMany("Interactions")
                        .HasForeignKey("FkUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Interactions_Users");

                    b.Navigation("FkActionType");

                    b.Navigation("FkArticle");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("ElectronicMedia.Models.View", b =>
                {
                    b.HasOne("ElectronicMedia.Models.Article", "FkArticle")
                        .WithMany("Views")
                        .HasForeignKey("FkArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_Views_Articles");

                    b.HasOne("ElectronicMedia.Models.User", "FkUser")
                        .WithMany("Views")
                        .HasForeignKey("FkUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Views_Users");

                    b.Navigation("FkArticle");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("ElectronicMedia.Models.ActionType", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Interactions");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ElectronicMedia.Models.Comment", b =>
                {
                    b.Navigation("ChildrenComments");
                });

            modelBuilder.Entity("ElectronicMedia.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Interactions");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
